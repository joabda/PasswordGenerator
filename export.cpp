#include "export.h"

Export::Export()
{
    availableMethods_.push_back("TXT");
    availableMethods_.push_back("PDF");
}

void Export::PDF(const QVector<QPair<QString, QString>>& password) const
{
    QPdfWriter exportFile("Passwords");
    exportFile.setPageSize(QPagedPaintDevice::A4);
    exportFile.setPageMargins(QMargins(30, 30, 30, 30));

    QPainter painter(&exportFile);
    painter.setPen(Qt::black);
    painter.setFont(QFont("Times", 10));

    QRect rect = painter.viewport();

    QString citydate = "Passwords generated " + QDate::currentDate().toString();

    painter.drawText(rect, Qt::AlignRight, citydate);


    QString sender = "Generator\n";
    sender += "github.com/joabda/Generator\n";
    sender += "Quebec, Canada\n";

    painter.drawText(rect, Qt::AlignLeft, sender);
    painter.end();
}

void Export::TXT(const QVector<QPair<QString, QString>>& password) const
{
    ofstream exportFile("Passwords.txt");
    if(exportFile.is_open())
    {
        exportFile << "Passwords generated by Generator a C++ random password generator.\n";
        exportFile << "Find more on github.com/joabda/Generator\n";
        for(auto& oneElement : password)
            exportFile << "Password for " << oneElement.first.toStdString() << " is : " << oneElement.second.toStdString() << ".\n";
        exportFile << "Generated on " << QDate::currentDate().toString().toStdString() << endl;
    }
    else
        fprintf(stderr, "Error opening file\n");
}

void Export::saveAs(const QString& method, const QVector<QPair<QString, QString>>& passwords) const
{
    if(method == "PDF")
        PDF(passwords);
    else
    {
        if(method == "TXT")
            TXT(passwords);
    }
}

QVector<QString> Export::getMethods() const
{
    return availableMethods_;
}
